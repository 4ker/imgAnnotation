#!/usr/bin/perl

# string with usage information
my $usage = <<"EOD";

Usage: splitListAndResults.pl <imgList> <resultsFile> <outImgList> <outResultsFile> <outImgListFlipped> <outResultsFileFlipped>

This script takes an image list file and its corresponding results file
generated by Navneet's detector. It splits both files into each a version
containing all original images and one version containing all flipped images.

EOD

# check command line arguments 
if (@ARGV < 6 || "--help" eq $ARGV[0]) {
	print "$usage";
	exit(0);
}

# get the command line arguments
my $LISTFILE_ORG = shift(@ARGV);
my $RESULTSFILE_ORG = shift(@ARGV);
my $LISTFILE_OUT = shift(@ARGV);
my $RESULTSFILE_OUT = shift(@ARGV);
my $LISTFILE_FLIPPED_OUT = shift(@ARGV);
my $RESULTSFILE_FLIPPED_OUT = shift(@ARGV);

# load the image list file
open(FILE, "< $LISTFILE_ORG") || die "failed to open $LISTFILE_ORG\n";
my @IMAGES = <FILE>;
close(FILE);
#chomp(@IMAGES); # delete newline characters

# load the image list file
open(FILE, "< $RESULTSFILE_ORG") || die "failed to open $RESULTSFILE_ORG\n";
my @RESULTS = <FILE>;
close(FILE);
#chomp(@RESULTS); # delete newline characters

# open the files we want to write to
open(FILE_LIST_OUT, "> $LISTFILE_OUT") || die "failed to open $LISTFILE_OUT\n";
open(FILE_RESULTS_OUT, "> $RESULTSFILE_OUT") || die "failed to open $RESULTSFILE_OUT\n";
open(FILE_LIST_FLIPPED_OUT, "> $LISTFILE_FLIPPED_OUT") || die "failed to open $LISTFILE_FLIPPED_OUT\n";
open(FILE_RESULTS_FLIPPED_OUT, "> $RESULTSFILE_FLIPPED_OUT") || die "failed to open $RESULTSFILE_FLIPPED_OUT\n";
$currentListHandle = *FILE_LIST_OUT;
$currentResultsHandle = *FILE_RESULTS_OUT;
$currentImg = "";

# process each line of the results file
foreach $line (@RESULTS) {
	# get all the different values
	@fields = split(/\s+/, $line);

	if ($fields[6] == 0) {
		# new file .. get the next image from the list
		$currentImg = shift(@IMAGES);

		# update the file handles
		if ($currentImg =~ /_flipped/i) {
			$currentListHandle = *FILE_LIST_FLIPPED_OUT;
			$currentResultsHandle = *FILE_RESULTS_FLIPPED_OUT;
		}
		else {
			$currentListHandle = *FILE_LIST_OUT;
			$currentResultsHandle = *FILE_RESULTS_OUT;
		}

		# print the image file name to the correct list file
		print { $currentListHandle } $currentImg;
	}

	# if no image is currently given, continue with the next line
	next if (!$currentImg);

	# print the line to the correct result file
	print { $currentResultsHandle } $line;
}

close(FILE_LIST_OUT);
close(FILE_RESULTS_OUT);
close(FILE_LIST_FLIPPED_OUT);
close(FILE_RESULTS_FLIPPED_OUT);

